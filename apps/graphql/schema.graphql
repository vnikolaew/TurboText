# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  access_token: String
  createdAt: DateTimeISO!
  expires_at: Int
  id_token: String
  metadata: JSON
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO!
  userConfigurationId: String
  userId: String!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

enum AccountOrderByRelevanceFieldEnum {
  access_token
  id_token
  provider
  providerAccountId
  refresh_token
  scope
  session_state
  token_type
  type
  userConfigurationId
  userId
}

input AccountOrderByRelevanceInput {
  fields: [AccountOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input AccountOrderByWithRelationInput {
  _relevance: AccountOrderByRelevanceInput
  access_token: SortOrderInput
  createdAt: SortOrder
  expires_at: SortOrderInput
  id_token: SortOrderInput
  metadata: SortOrderInput
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrderInput
  scope: SortOrderInput
  session_state: SortOrderInput
  token_type: SortOrderInput
  type: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userConfigurationId: SortOrderInput
  userId: SortOrder
}

input AccountProviderProviderAccountIdCompoundUniqueInput {
  provider: String!
  providerAccountId: String!
}

enum AccountScalarFieldEnum {
  access_token
  createdAt
  expires_at
  id_token
  metadata
  provider
  providerAccountId
  refresh_token
  scope
  session_state
  token_type
  type
  updatedAt
  userConfigurationId
  userId
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  access_token: StringNullableFilter
  createdAt: DateTimeFilter
  expires_at: IntNullableFilter
  id_token: StringNullableFilter
  metadata: JsonNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userConfigurationId: StringNullableFilter
  userId: StringFilter
}

input AccountWhereUniqueInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  access_token: StringNullableFilter
  createdAt: DateTimeFilter
  expires_at: IntNullableFilter
  id_token: StringNullableFilter
  metadata: JsonNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  provider_providerAccountId: AccountProviderProviderAccountIdCompoundUniqueInput
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userConfigurationId: StringNullableFilter
  userId: StringFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

enum CaretSmoothness {
  FAST
  MEDIUM
  OFF
  SLOW
}

enum CaretStyle {
  BLOCK
  BLOCK_FILLED
  CURSOR
  OFF
  UNDERSCORE
}

enum ConfidenceMode {
  MAX
  OFF
  ON
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input EnumCaretSmoothnessFilter {
  equals: CaretSmoothness
  in: [CaretSmoothness!]
  not: NestedEnumCaretSmoothnessFilter
  notIn: [CaretSmoothness!]
}

input EnumCaretStyleFilter {
  equals: CaretStyle
  in: [CaretStyle!]
  not: NestedEnumCaretStyleFilter
  notIn: [CaretStyle!]
}

input EnumConfidenceModeFilter {
  equals: ConfidenceMode
  in: [ConfidenceMode!]
  not: NestedEnumConfidenceModeFilter
  notIn: [ConfidenceMode!]
}

input EnumIndicateTyposFilter {
  equals: IndicateTypos
  in: [IndicateTypos!]
  not: NestedEnumIndicateTyposFilter
  notIn: [IndicateTypos!]
}

input EnumPaceCaretSpeedFilter {
  equals: PaceCaretSpeed
  in: [PaceCaretSpeed!]
  not: NestedEnumPaceCaretSpeedFilter
  notIn: [PaceCaretSpeed!]
}

input EnumRunDifficultyFilter {
  equals: RunDifficulty
  in: [RunDifficulty!]
  not: NestedEnumRunDifficultyFilter
  notIn: [RunDifficulty!]
}

input EnumShowAverageFilter {
  equals: ShowAverage
  in: [ShowAverage!]
  not: NestedEnumShowAverageFilter
  notIn: [ShowAverage!]
}

input EnumTypingRunModeFilter {
  equals: TypingRunMode
  in: [TypingRunMode!]
  not: NestedEnumTypingRunModeFilter
  notIn: [TypingRunMode!]
}

input EnumUsersChallengeMatchStateFilter {
  equals: UsersChallengeMatchState
  in: [UsersChallengeMatchState!]
  not: NestedEnumUsersChallengeMatchStateFilter
  notIn: [UsersChallengeMatchState!]
}

input EnumUsersChallengeStateFilter {
  equals: UsersChallengeState
  in: [UsersChallengeState!]
  not: NestedEnumUsersChallengeStateFilter
  notIn: [UsersChallengeState!]
}

enum IndicateTypos {
  BELOW
  OFF
  REPLACE
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonNullableFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input NestedEnumCaretSmoothnessFilter {
  equals: CaretSmoothness
  in: [CaretSmoothness!]
  not: NestedEnumCaretSmoothnessFilter
  notIn: [CaretSmoothness!]
}

input NestedEnumCaretStyleFilter {
  equals: CaretStyle
  in: [CaretStyle!]
  not: NestedEnumCaretStyleFilter
  notIn: [CaretStyle!]
}

input NestedEnumConfidenceModeFilter {
  equals: ConfidenceMode
  in: [ConfidenceMode!]
  not: NestedEnumConfidenceModeFilter
  notIn: [ConfidenceMode!]
}

input NestedEnumIndicateTyposFilter {
  equals: IndicateTypos
  in: [IndicateTypos!]
  not: NestedEnumIndicateTyposFilter
  notIn: [IndicateTypos!]
}

input NestedEnumPaceCaretSpeedFilter {
  equals: PaceCaretSpeed
  in: [PaceCaretSpeed!]
  not: NestedEnumPaceCaretSpeedFilter
  notIn: [PaceCaretSpeed!]
}

input NestedEnumRunDifficultyFilter {
  equals: RunDifficulty
  in: [RunDifficulty!]
  not: NestedEnumRunDifficultyFilter
  notIn: [RunDifficulty!]
}

input NestedEnumShowAverageFilter {
  equals: ShowAverage
  in: [ShowAverage!]
  not: NestedEnumShowAverageFilter
  notIn: [ShowAverage!]
}

input NestedEnumTypingRunModeFilter {
  equals: TypingRunMode
  in: [TypingRunMode!]
  not: NestedEnumTypingRunModeFilter
  notIn: [TypingRunMode!]
}

input NestedEnumUsersChallengeMatchStateFilter {
  equals: UsersChallengeMatchState
  in: [UsersChallengeMatchState!]
  not: NestedEnumUsersChallengeMatchStateFilter
  notIn: [UsersChallengeMatchState!]
}

input NestedEnumUsersChallengeStateFilter {
  equals: UsersChallengeState
  in: [UsersChallengeState!]
  not: NestedEnumUsersChallengeStateFilter
  notIn: [UsersChallengeState!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedUuidFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedUuidFilter
  notIn: [String!]
  search: String
}

input NestedUuidNullableFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedUuidNullableFilter
  notIn: [String!]
  search: String
}

enum NullsOrder {
  first
  last
}

enum PaceCaretSpeed {
  AVG
  CUSTOM
  DAILY
  LAST
  OFF
  PB
}

type Query {
  findById(id: String!): User!
}

enum QueryMode {
  default
  insensitive
}

enum RunDifficulty {
  EXPERT
  MASTER
  NORMAL
}

type Session {
  createdAt: DateTimeISO!
  expires: DateTimeISO!
  sessionToken: String!
  updatedAt: DateTimeISO!
  userConfigurationId: String
  userId: String!
}

input SessionListRelationFilter {
  every: SessionWhereInput
  none: SessionWhereInput
  some: SessionWhereInput
}

input SessionOrderByRelationAggregateInput {
  _count: SortOrder
}

enum SessionOrderByRelevanceFieldEnum {
  sessionToken
  userConfigurationId
  userId
}

input SessionOrderByRelevanceInput {
  fields: [SessionOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input SessionOrderByWithRelationInput {
  _relevance: SessionOrderByRelevanceInput
  createdAt: SortOrder
  expires: SortOrder
  sessionToken: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userConfigurationId: SortOrderInput
  userId: SortOrder
}

enum SessionScalarFieldEnum {
  createdAt
  expires
  sessionToken
  updatedAt
  userConfigurationId
  userId
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  createdAt: DateTimeFilter
  expires: DateTimeFilter
  sessionToken: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userConfigurationId: StringNullableFilter
  userId: StringFilter
}

input SessionWhereUniqueInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  createdAt: DateTimeFilter
  expires: DateTimeFilter
  sessionToken: String
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userConfigurationId: StringNullableFilter
  userId: StringFilter
}

enum ShowAverage {
  ACC
  BOTH
  OFF
  SPEED
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

type Tag {
  createdAt: DateTimeISO!
  id: String!

  """[TagMetadata]"""
  metadata: JSON
  name: String!
  updatedAt: DateTimeISO!
  userConfigurationId: String
  userId: String!
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagOrderByRelationAggregateInput {
  _count: SortOrder
}

enum TagOrderByRelevanceFieldEnum {
  id
  name
  userConfigurationId
  userId
}

input TagOrderByRelevanceInput {
  fields: [TagOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input TagOrderByWithRelationInput {
  _relevance: TagOrderByRelevanceInput
  createdAt: SortOrder
  id: SortOrder
  metadata: SortOrderInput
  name: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userConfigurationId: SortOrderInput
  userId: SortOrder
}

enum TagScalarFieldEnum {
  createdAt
  id
  metadata
  name
  updatedAt
  userConfigurationId
  userId
}

input TagWhereInput {
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  createdAt: DateTimeFilter
  id: UuidFilter
  metadata: JsonNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userConfigurationId: StringNullableFilter
  userId: StringFilter
}

input TagWhereUniqueInput {
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  createdAt: DateTimeFilter
  id: String
  metadata: JsonNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userConfigurationId: StringNullableFilter
  userId: StringFilter
}

type TypingRun {
  _count: TypingRunCount
  createdAt: DateTimeISO!
  flags: Int!
  id: String!

  """[TypingRunMetadata]"""
  metadata: JSON
  mode: TypingRunMode!
  time: Int
  totalTimeMilliseconds: Int!

  """[TypedLetters]"""
  typedLetters: JSON!
  updatedAt: DateTimeISO!
  userId: String!
  wordCount: Int
}

type TypingRunCount {
  challanges_one(where: UsersChallengeWhereInput): Int!
  challenges_two(where: UsersChallengeWhereInput): Int!
}

input TypingRunListRelationFilter {
  every: TypingRunWhereInput
  none: TypingRunWhereInput
  some: TypingRunWhereInput
}

enum TypingRunMode {
  TIME
  WORDS
}

input TypingRunNullableRelationFilter {
  is: TypingRunWhereInput
  isNot: TypingRunWhereInput
}

input TypingRunOrderByRelationAggregateInput {
  _count: SortOrder
}

enum TypingRunOrderByRelevanceFieldEnum {
  id
  userId
}

input TypingRunOrderByRelevanceInput {
  fields: [TypingRunOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input TypingRunOrderByWithRelationInput {
  _relevance: TypingRunOrderByRelevanceInput
  challanges_one: UsersChallengeOrderByRelationAggregateInput
  challenges_two: UsersChallengeOrderByRelationAggregateInput
  createdAt: SortOrder
  flags: SortOrder
  id: SortOrder
  metadata: SortOrderInput
  mode: SortOrder
  time: SortOrderInput
  totalTimeMilliseconds: SortOrder
  typedLetters: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  wordCount: SortOrderInput
}

enum TypingRunScalarFieldEnum {
  createdAt
  flags
  id
  metadata
  mode
  time
  totalTimeMilliseconds
  typedLetters
  updatedAt
  userId
  wordCount
}

input TypingRunWhereInput {
  AND: [TypingRunWhereInput!]
  NOT: [TypingRunWhereInput!]
  OR: [TypingRunWhereInput!]
  challanges_one: UsersChallengeListRelationFilter
  challenges_two: UsersChallengeListRelationFilter
  createdAt: DateTimeFilter
  flags: IntFilter
  id: UuidFilter
  metadata: JsonNullableFilter
  mode: EnumTypingRunModeFilter
  time: IntNullableFilter
  totalTimeMilliseconds: IntFilter
  typedLetters: JsonFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
  wordCount: IntNullableFilter
}

input TypingRunWhereUniqueInput {
  AND: [TypingRunWhereInput!]
  NOT: [TypingRunWhereInput!]
  OR: [TypingRunWhereInput!]
  challanges_one: UsersChallengeListRelationFilter
  challenges_two: UsersChallengeListRelationFilter
  createdAt: DateTimeFilter
  flags: IntFilter
  id: String
  metadata: JsonNullableFilter
  mode: EnumTypingRunModeFilter
  time: IntNullableFilter
  totalTimeMilliseconds: IntFilter
  typedLetters: JsonFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
  wordCount: IntNullableFilter
}

"""Always after the prisma-client-js generator"""
type User {
  _count: UserCount
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  challenge_matches_one(cursor: UsersChallengeMatchWhereUniqueInput, distinct: [UsersChallengeMatchScalarFieldEnum!], orderBy: [UsersChallengeMatchOrderByWithRelationInput!], skip: Int, take: Int, where: UsersChallengeMatchWhereInput): [UsersChallengeMatch!]!
  challenge_matches_two(cursor: UsersChallengeMatchWhereUniqueInput, distinct: [UsersChallengeMatchScalarFieldEnum!], orderBy: [UsersChallengeMatchOrderByWithRelationInput!], skip: Int, take: Int, where: UsersChallengeMatchWhereInput): [UsersChallengeMatch!]!
  challenges_one(cursor: UsersChallengeWhereUniqueInput, distinct: [UsersChallengeScalarFieldEnum!], orderBy: [UsersChallengeOrderByWithRelationInput!], skip: Int, take: Int, where: UsersChallengeWhereInput): [UsersChallenge!]!
  challenges_two(cursor: UsersChallengeWhereUniqueInput, distinct: [UsersChallengeScalarFieldEnum!], orderBy: [UsersChallengeOrderByWithRelationInput!], skip: Int, take: Int, where: UsersChallengeWhereInput): [UsersChallenge!]!
  configuration(where: UserConfigurationWhereInput): UserConfiguration
  createdAt: DateTimeISO!
  email: String!
  emailVerified: DateTimeISO
  experience(where: UserExperienceWhereInput): UserExperience
  id: String!
  image: String

  """[UserMetadata]"""
  metadata: JSON
  name: String
  notifications(cursor: UserNotificationWhereUniqueInput, distinct: [UserNotificationScalarFieldEnum!], orderBy: [UserNotificationOrderByWithRelationInput!], skip: Int, take: Int, where: UserNotificationWhereInput): [UserNotification!]!
  password: String
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  tags(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
  typingRuns(cursor: TypingRunWhereUniqueInput, distinct: [TypingRunScalarFieldEnum!], orderBy: [TypingRunOrderByWithRelationInput!], skip: Int, take: Int, where: TypingRunWhereInput): [TypingRun!]!
  updatedAt: DateTimeISO!
}

type UserConfiguration {
  auto_save_mode: Boolean!
  blind_mode: Boolean!
  caret_smoothness: CaretSmoothness!
  caret_style: CaretStyle!
  createdAt: DateTimeISO!
  elements_show_average: ShowAverage!
  elements_show_caps_lock_warning: Boolean!
  elements_show_key_tips: Boolean!
  elements_show_oof_warning: Boolean!
  font_family: String!
  font_size: Int!
  id: String!
  input_confidence_mode: ConfidenceMode!
  input_freedom_mode: Boolean!
  input_indicate_typos: IndicateTypos!
  language: String!

  """[UserConfigurationMetadata]"""
  metadata: JSON
  pace_caret_speed: PaceCaretSpeed!
  pace_caret_style: CaretStyle!
  sound_click_sound: String
  sound_error_sound: String
  test_difficulty: RunDifficulty!
  theme: String!
  theme_colorful_mode: Boolean!
  theme_flip_colors: Boolean!
  updatedAt: DateTimeISO!
  userId: String!
}

input UserConfigurationNullableRelationFilter {
  is: UserConfigurationWhereInput
  isNot: UserConfigurationWhereInput
}

enum UserConfigurationOrderByRelevanceFieldEnum {
  font_family
  id
  language
  sound_click_sound
  sound_error_sound
  theme
  userId
}

input UserConfigurationOrderByRelevanceInput {
  fields: [UserConfigurationOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UserConfigurationOrderByWithRelationInput {
  _relevance: UserConfigurationOrderByRelevanceInput
  auto_save_mode: SortOrder
  blind_mode: SortOrder
  caret_smoothness: SortOrder
  caret_style: SortOrder
  createdAt: SortOrder
  elements_show_average: SortOrder
  elements_show_caps_lock_warning: SortOrder
  elements_show_key_tips: SortOrder
  elements_show_oof_warning: SortOrder
  font_family: SortOrder
  font_size: SortOrder
  id: SortOrder
  input_confidence_mode: SortOrder
  input_freedom_mode: SortOrder
  input_indicate_typos: SortOrder
  language: SortOrder
  metadata: SortOrderInput
  pace_caret_speed: SortOrder
  pace_caret_style: SortOrder
  sound_click_sound: SortOrderInput
  sound_error_sound: SortOrderInput
  test_difficulty: SortOrder
  theme: SortOrder
  theme_colorful_mode: SortOrder
  theme_flip_colors: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input UserConfigurationWhereInput {
  AND: [UserConfigurationWhereInput!]
  NOT: [UserConfigurationWhereInput!]
  OR: [UserConfigurationWhereInput!]
  auto_save_mode: BoolFilter
  blind_mode: BoolFilter
  caret_smoothness: EnumCaretSmoothnessFilter
  caret_style: EnumCaretStyleFilter
  createdAt: DateTimeFilter
  elements_show_average: EnumShowAverageFilter
  elements_show_caps_lock_warning: BoolFilter
  elements_show_key_tips: BoolFilter
  elements_show_oof_warning: BoolFilter
  font_family: StringFilter
  font_size: IntFilter
  id: StringFilter
  input_confidence_mode: EnumConfidenceModeFilter
  input_freedom_mode: BoolFilter
  input_indicate_typos: EnumIndicateTyposFilter
  language: StringFilter
  metadata: JsonNullableFilter
  pace_caret_speed: EnumPaceCaretSpeedFilter
  pace_caret_style: EnumCaretStyleFilter
  sound_click_sound: StringNullableFilter
  sound_error_sound: StringNullableFilter
  test_difficulty: EnumRunDifficultyFilter
  theme: StringFilter
  theme_colorful_mode: BoolFilter
  theme_flip_colors: BoolFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

type UserCount {
  accounts(where: AccountWhereInput): Int!
  challenge_matches_one(where: UsersChallengeMatchWhereInput): Int!
  challenge_matches_two(where: UsersChallengeMatchWhereInput): Int!
  challenges_one(where: UsersChallengeWhereInput): Int!
  challenges_two(where: UsersChallengeWhereInput): Int!
  notifications(where: UserNotificationWhereInput): Int!
  sessions(where: SessionWhereInput): Int!
  tags(where: TagWhereInput): Int!
  typingRuns(where: TypingRunWhereInput): Int!
}

type UserExperience {
  createdAt: DateTimeISO!
  id: String!
  level: Int!
  metadata: JSON
  points: Int!
  updatedAt: DateTimeISO!
  userId: String!
}

input UserExperienceNullableRelationFilter {
  is: UserExperienceWhereInput
  isNot: UserExperienceWhereInput
}

enum UserExperienceOrderByRelevanceFieldEnum {
  id
  userId
}

input UserExperienceOrderByRelevanceInput {
  fields: [UserExperienceOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UserExperienceOrderByWithRelationInput {
  _relevance: UserExperienceOrderByRelevanceInput
  createdAt: SortOrder
  id: SortOrder
  level: SortOrder
  metadata: SortOrderInput
  points: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input UserExperienceWhereInput {
  AND: [UserExperienceWhereInput!]
  NOT: [UserExperienceWhereInput!]
  OR: [UserExperienceWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  level: IntFilter
  metadata: JsonNullableFilter
  points: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

type UserNotification {
  createdAt: DateTimeISO!
  id: String!
  metadata: JSON

  """[UserNotificationPayload]"""
  payload: JSON
  read: Boolean!
  updatedAt: DateTimeISO!
  userId: String!
}

input UserNotificationListRelationFilter {
  every: UserNotificationWhereInput
  none: UserNotificationWhereInput
  some: UserNotificationWhereInput
}

input UserNotificationOrderByRelationAggregateInput {
  _count: SortOrder
}

enum UserNotificationOrderByRelevanceFieldEnum {
  id
  userId
}

input UserNotificationOrderByRelevanceInput {
  fields: [UserNotificationOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UserNotificationOrderByWithRelationInput {
  _relevance: UserNotificationOrderByRelevanceInput
  createdAt: SortOrder
  id: SortOrder
  metadata: SortOrderInput
  payload: SortOrderInput
  read: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum UserNotificationScalarFieldEnum {
  createdAt
  id
  metadata
  payload
  read
  updatedAt
  userId
}

input UserNotificationWhereInput {
  AND: [UserNotificationWhereInput!]
  NOT: [UserNotificationWhereInput!]
  OR: [UserNotificationWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metadata: JsonNullableFilter
  payload: JsonNullableFilter
  read: BoolFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input UserNotificationWhereUniqueInput {
  AND: [UserNotificationWhereInput!]
  NOT: [UserNotificationWhereInput!]
  OR: [UserNotificationWhereInput!]
  createdAt: DateTimeFilter
  id: String
  metadata: JsonNullableFilter
  payload: JsonNullableFilter
  read: BoolFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

enum UserOrderByRelevanceFieldEnum {
  email
  id
  image
  name
  password
}

input UserOrderByRelevanceInput {
  fields: [UserOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UserOrderByWithRelationInput {
  _relevance: UserOrderByRelevanceInput
  accounts: AccountOrderByRelationAggregateInput
  challenge_matches_one: UsersChallengeMatchOrderByRelationAggregateInput
  challenge_matches_two: UsersChallengeMatchOrderByRelationAggregateInput
  challenges_one: UsersChallengeOrderByRelationAggregateInput
  challenges_two: UsersChallengeOrderByRelationAggregateInput
  configuration: UserConfigurationOrderByWithRelationInput
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrderInput
  experience: UserExperienceOrderByWithRelationInput
  id: SortOrder
  image: SortOrderInput
  metadata: SortOrderInput
  name: SortOrderInput
  notifications: UserNotificationOrderByRelationAggregateInput
  password: SortOrderInput
  sessions: SessionOrderByRelationAggregateInput
  tags: TagOrderByRelationAggregateInput
  typingRuns: TypingRunOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  challenge_matches_one: UsersChallengeMatchListRelationFilter
  challenge_matches_two: UsersChallengeMatchListRelationFilter
  challenges_one: UsersChallengeListRelationFilter
  challenges_two: UsersChallengeListRelationFilter
  configuration: UserConfigurationNullableRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  emailVerified: DateTimeNullableFilter
  experience: UserExperienceNullableRelationFilter
  id: StringFilter
  image: StringNullableFilter
  metadata: JsonNullableFilter
  name: StringNullableFilter
  notifications: UserNotificationListRelationFilter
  password: StringNullableFilter
  sessions: SessionListRelationFilter
  tags: TagListRelationFilter
  typingRuns: TypingRunListRelationFilter
  updatedAt: DateTimeFilter
}

type UsersChallenge {
  createdAt: DateTimeISO!
  id: String!
  matchId: String!

  """[UsersChallengeMetadata]"""
  metadata: JSON
  state: UsersChallengeState!
  updatedAt: DateTimeISO!
  userOneId: String!
  userOneRunId: String
  userTwoId: String!
  userTwoRunId: String
}

input UsersChallengeListRelationFilter {
  every: UsersChallengeWhereInput
  none: UsersChallengeWhereInput
  some: UsersChallengeWhereInput
}

type UsersChallengeMatch {
  _count: UsersChallengeMatchCount
  createdAt: DateTimeISO!
  id: String!

  """[UsersChallengeMatchMetadata]"""
  metadata: JSON
  state: UsersChallengeMatchState!
  updatedAt: DateTimeISO!
  userOneId: String!
  userTwoId: String!
}

type UsersChallengeMatchCount {
  challenges(where: UsersChallengeWhereInput): Int!
}

input UsersChallengeMatchListRelationFilter {
  every: UsersChallengeMatchWhereInput
  none: UsersChallengeMatchWhereInput
  some: UsersChallengeMatchWhereInput
}

input UsersChallengeMatchOrderByRelationAggregateInput {
  _count: SortOrder
}

enum UsersChallengeMatchOrderByRelevanceFieldEnum {
  id
  userOneId
  userTwoId
}

input UsersChallengeMatchOrderByRelevanceInput {
  fields: [UsersChallengeMatchOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UsersChallengeMatchOrderByWithRelationInput {
  _relevance: UsersChallengeMatchOrderByRelevanceInput
  challenges: UsersChallengeOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  metadata: SortOrderInput
  state: SortOrder
  updatedAt: SortOrder
  userOne: UserOrderByWithRelationInput
  userOneId: SortOrder
  userTwo: UserOrderByWithRelationInput
  userTwoId: SortOrder
}

input UsersChallengeMatchRelationFilter {
  is: UsersChallengeMatchWhereInput
  isNot: UsersChallengeMatchWhereInput
}

enum UsersChallengeMatchScalarFieldEnum {
  createdAt
  id
  metadata
  state
  updatedAt
  userOneId
  userTwoId
}

enum UsersChallengeMatchState {
  Accepted
  HalfAccepted
  Pending
  Rejected
  Started
}

input UsersChallengeMatchWhereInput {
  AND: [UsersChallengeMatchWhereInput!]
  NOT: [UsersChallengeMatchWhereInput!]
  OR: [UsersChallengeMatchWhereInput!]
  challenges: UsersChallengeListRelationFilter
  createdAt: DateTimeFilter
  id: UuidFilter
  metadata: JsonNullableFilter
  state: EnumUsersChallengeMatchStateFilter
  updatedAt: DateTimeFilter
  userOne: UserRelationFilter
  userOneId: StringFilter
  userTwo: UserRelationFilter
  userTwoId: StringFilter
}

input UsersChallengeMatchWhereUniqueInput {
  AND: [UsersChallengeMatchWhereInput!]
  NOT: [UsersChallengeMatchWhereInput!]
  OR: [UsersChallengeMatchWhereInput!]
  challenges: UsersChallengeListRelationFilter
  createdAt: DateTimeFilter
  id: String
  metadata: JsonNullableFilter
  state: EnumUsersChallengeMatchStateFilter
  updatedAt: DateTimeFilter
  userOne: UserRelationFilter
  userOneId: StringFilter
  userTwo: UserRelationFilter
  userTwoId: StringFilter
}

input UsersChallengeOrderByRelationAggregateInput {
  _count: SortOrder
}

enum UsersChallengeOrderByRelevanceFieldEnum {
  id
  matchId
  userOneId
  userOneRunId
  userTwoId
  userTwoRunId
}

input UsersChallengeOrderByRelevanceInput {
  fields: [UsersChallengeOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UsersChallengeOrderByWithRelationInput {
  _relevance: UsersChallengeOrderByRelevanceInput
  createdAt: SortOrder
  id: SortOrder
  match: UsersChallengeMatchOrderByWithRelationInput
  matchId: SortOrder
  metadata: SortOrderInput
  state: SortOrder
  updatedAt: SortOrder
  userOne: UserOrderByWithRelationInput
  userOneId: SortOrder
  userOneRun: TypingRunOrderByWithRelationInput
  userOneRunId: SortOrderInput
  userTwo: UserOrderByWithRelationInput
  userTwoId: SortOrder
  userTwoRun: TypingRunOrderByWithRelationInput
  userTwoRunId: SortOrderInput
}

enum UsersChallengeScalarFieldEnum {
  createdAt
  id
  matchId
  metadata
  state
  updatedAt
  userOneId
  userOneRunId
  userTwoId
  userTwoRunId
}

enum UsersChallengeState {
  Finished
  Pending
  Playing
  Stopped
}

input UsersChallengeWhereInput {
  AND: [UsersChallengeWhereInput!]
  NOT: [UsersChallengeWhereInput!]
  OR: [UsersChallengeWhereInput!]
  createdAt: DateTimeFilter
  id: UuidFilter
  match: UsersChallengeMatchRelationFilter
  matchId: UuidFilter
  metadata: JsonNullableFilter
  state: EnumUsersChallengeStateFilter
  updatedAt: DateTimeFilter
  userOne: UserRelationFilter
  userOneId: StringFilter
  userOneRun: TypingRunNullableRelationFilter
  userOneRunId: UuidNullableFilter
  userTwo: UserRelationFilter
  userTwoId: StringFilter
  userTwoRun: TypingRunNullableRelationFilter
  userTwoRunId: UuidNullableFilter
}

input UsersChallengeWhereUniqueInput {
  AND: [UsersChallengeWhereInput!]
  NOT: [UsersChallengeWhereInput!]
  OR: [UsersChallengeWhereInput!]
  createdAt: DateTimeFilter
  id: String
  match: UsersChallengeMatchRelationFilter
  matchId: UuidFilter
  metadata: JsonNullableFilter
  state: EnumUsersChallengeStateFilter
  updatedAt: DateTimeFilter
  userOne: UserRelationFilter
  userOneId: StringFilter
  userOneRun: TypingRunNullableRelationFilter
  userOneRunId: UuidNullableFilter
  userTwo: UserRelationFilter
  userTwoId: StringFilter
  userTwoRun: TypingRunNullableRelationFilter
  userTwoRunId: UuidNullableFilter
}

input UuidFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedUuidFilter
  notIn: [String!]
  search: String
}

input UuidNullableFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedUuidNullableFilter
  notIn: [String!]
  search: String
}