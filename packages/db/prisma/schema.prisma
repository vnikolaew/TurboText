generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views", "fullTextSearch", "driverAdapters", "relationJoins"]
}

/// Always after the prisma-client-js generator
generator json {
  provider = "prisma-json-types-generator"
  // namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
}

generator typegraphql {
  provider            = "typegraphql-prisma"
  emitTranspiledCode  = true
  formatGeneratedCode = true
  // output = ""
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, pgvector(map: "vector", schema: "public"), pg_trgm, fuzzystrmatch()]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?

  /// [UserMetadata]
  metadata Json?     @default("null") @db.JsonB
  image    String?
  accounts Account[]
  sessions Session[]

  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  typingRuns    TypingRun[]
  tags          Tag[]
  configuration UserConfiguration?
  experience    UserExperience?

  challenge_matches_one UsersChallengeMatch[] @relation("userOne")
  challenge_matches_two UsersChallengeMatch[] @relation("userTwo")

  challenges_one UsersChallenge[]   @relation("userOne")
  challenges_two UsersChallenge[]   @relation("userTwo")
  notifications  UserNotification[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  metadata          Json?   @default("null") @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userConfigurationId String?

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userConfigurationId String?
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Tag {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name   String

  /// [TagMetadata]
  metadata Json? @default("null") @db.JsonB

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userConfigurationId String?
}

enum UsersChallengeState {
  Pending
  Playing
  Finished
  Stopped
}

enum UsersChallengeMatchState {
  Pending
  HalfAccepted
  Accepted
  Rejected
  Started
}

model UsersChallenge {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  userOneId String
  userOne   User   @relation("userOne", fields: [userOneId], references: [id], onDelete: Cascade)

  userTwoId String
  userTwo   User   @relation("userTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

  userOneRunId String?    @db.Uuid
  userOneRun   TypingRun? @relation("userOneRun", fields: [userOneRunId], references: [id], onDelete: Cascade)

  userTwoRunId String?    @db.Uuid
  userTwoRun   TypingRun? @relation("userTwoRun", fields: [userTwoRunId], references: [id], onDelete: Cascade)

  matchId String              @db.Uuid
  match   UsersChallengeMatch @relation(fields: [matchId], references: [id], onDelete: Cascade)

  /// [UsersChallengeMetadata]
  metadata Json?               @default("null") @db.JsonB
  state    UsersChallengeState @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UsersChallengeMatch {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  userOneId String
  userOne   User   @relation("userOne", fields: [userOneId], references: [id], onDelete: Cascade)

  userTwoId String
  userTwo   User   @relation("userTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

  /// [UsersChallengeMatchMetadata]
  metadata Json?                    @default("null") @db.JsonB
  state    UsersChallengeMatchState @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  challenges UsersChallenge[]
}

model TypingRun {
  id                    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String
  user                  User   @relation(fields: [userId], references: [id], onDelete: NoAction)
  time                  Int?
  wordCount             Int?
  totalTimeMilliseconds Int

  mode     TypingRunMode
  flags    Int
  /// [TypingRunMetadata]
  metadata Json?         @default("null") @db.JsonB

  /// [TypedLetters]
  typedLetters Json @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  challanges_one UsersChallenge[] @relation("userOneRun")
  challenges_two UsersChallenge[] @relation("userTwoRun")
}

enum TypingRunMode {
  TIME
  WORDS
}

enum RunDifficulty {
  NORMAL
  EXPERT
  MASTER
}

enum ConfidenceMode {
  ON
  OFF
  MAX
}

enum CaretSmoothness {
  OFF
  SLOW
  MEDIUM
  FAST
}

enum CaretStyle {
  OFF
  CURSOR
  BLOCK
  BLOCK_FILLED
  UNDERSCORE
}

enum ShowAverage {
  OFF
  SPEED
  ACC
  BOTH
}

enum IndicateTypos {
  OFF
  BELOW
  REPLACE
}

model UserConfiguration {
  id String @id @default(cuid())

  userId          String        @unique
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  test_difficulty RunDifficulty @default(NORMAL)

  blind_mode     Boolean @default(false)
  auto_save_mode Boolean @default(false)

  input_freedom_mode    Boolean        @default(false)
  input_confidence_mode ConfidenceMode @default(OFF)
  input_indicate_typos  IndicateTypos  @default(OFF)

  sound_click_sound String?
  sound_error_sound String?

  caret_smoothness CaretSmoothness @default(OFF)
  caret_style      CaretStyle      @default(OFF)
  pace_caret_style CaretStyle      @default(OFF)
  pace_caret_speed PaceCaretSpeed  @default(OFF)

  theme               String  @default("dark")
  theme_flip_colors   Boolean @default(false)
  theme_colorful_mode Boolean @default(false)

  font_family String @default("SFMono")
  font_size   Int    @default(2)

  elements_show_key_tips          Boolean     @default(false)
  elements_show_oof_warning       Boolean     @default(false)
  elements_show_caps_lock_warning Boolean     @default(false)
  elements_show_average           ShowAverage @default(OFF)

  language String @default("English")

  /// [UserConfigurationMetadata]
  metadata  Json?    @default("null") @db.JsonB
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserNotification {
  id     String @id @default(cuid())
  userId String

  /// [UserNotificationPayload]
  payload Json?   @default("null") @db.JsonB
  read    Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  metadata  Json?    @default("null") @db.JsonB
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserExperience {
  id     String @id @default(cuid())
  userId String @unique

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  points Int  @default(0)
  level  Int  @default(1)

  metadata  Json?    @default("null") @db.JsonB
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaceCaretSpeed {
  OFF
  AVG
  PB
  LAST
  DAILY
  CUSTOM
}
